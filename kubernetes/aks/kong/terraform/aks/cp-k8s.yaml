---
# Source: kong/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: control-plane-kong
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
---
# Source: kong/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: control-plane-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: control-plane
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "UTBQZ3RZYzFEOQ=="
  password: "ZGVtbzEyMw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: kong/templates/wait-for-postgres-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: control-plane-kong-bash-wait-for-postgres
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
data:
  wait.sh: |
    until timeout 2 bash -c "9<>/dev/tcp/${KONG_PG_HOST}/${KONG_PG_PORT}"
      do echo "waiting for db - trying ${KONG_PG_HOST}:${KONG_PG_PORT}"
      sleep 2
    done
---
# Source: kong/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: control-plane-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: control-plane
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: control-plane
    app.kubernetes.io/component: primary
---
# Source: kong/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: control-plane-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: control-plane
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: control-plane
    app.kubernetes.io/component: primary
---
# Source: kong/templates/service-kong-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: control-plane-kong-admin
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
spec:
  type: NodePort
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: kong-admin-tls
    port: 8444
    targetPort: 8444
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "control-plane"
---
# Source: kong/templates/service-kong-cluster-telemetry.yaml
apiVersion: v1
kind: Service
metadata:
  name: control-plane-kong-clustertelemetry
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
spec:
  type: ClusterIP
  ports:
  - name: kong-clustertelemetry-tls
    port: 8006
    targetPort: 8006
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "control-plane"
---
# Source: kong/templates/service-kong-cluster.yaml
apiVersion: v1
kind: Service
metadata:
  name: control-plane-kong-cluster
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
spec:
  type: ClusterIP
  ports:
  - name: kong-cluster-tls
    port: 8005
    targetPort: 8005
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "control-plane"
---
# Source: kong/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: control-plane-kong
  namespace:  default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
    app.kubernetes.io/component: app
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: "control-plane"

  template:
    metadata:
      annotations:
        kuma.io/service-account-token-volume: control-plane-kong-token
        kuma.io/gateway: "enabled"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.42.0
        app.kubernetes.io/instance: "control-plane"
        app.kubernetes.io/managed-by: "Helm"
        
        app.kubernetes.io/version: "3.8"
        app.kubernetes.io/component: app
        app: control-plane-kong
        
        version: "3.8"
    spec:
      serviceAccountName: control-plane-kong
      automountServiceAccountToken: false
      
      initContainers:
      - name: clear-stale-pid
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        resources:
          {}
        command:
        - "rm"
        - "-vrf"
        - "$KONG_PREFIX/pids"
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        
        volumeMounts:
        - name: control-plane-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: control-plane-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
      - name: wait-for-db
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        
      
        args: [ "/bin/bash", "-c", "export KONG_NGINX_DAEMON=on KONG_PREFIX=`mktemp -d` KONG_KEYRING_ENABLED=off; until kong start; do echo 'waiting for db'; sleep 1; done; kong stop"]
        volumeMounts:
          - name: control-plane-kong-prefix-dir
            mountPath: /kong_prefix/
          - name: control-plane-kong-tmp
            mountPath: /tmp
          - name:  kong-cluster-cert
            mountPath: /etc/secrets/kong-cluster-cert
          
        resources:
          {}
      containers:
      - name: "proxy"
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        lifecycle:
          preStop:
            exec:
              command:
              - kong
              - quit
              - --wait=15
        ports:
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: admin-tls
          containerPort: 8444
          protocol: TCP
        - name: status
          containerPort: 8100
          protocol: TCP
        - name: cluster-tls
          containerPort: 8005
          protocol: TCP
        volumeMounts:
          - name: control-plane-kong-prefix-dir
            mountPath: /kong_prefix/
          - name: control-plane-kong-tmp
            mountPath: /tmp
          - name:  kong-cluster-cert
            mountPath: /etc/secrets/kong-cluster-cert
          
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status/ready
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {} 
      securityContext:
        {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: control-plane-kong-prefix-dir
          emptyDir:
            sizeLimit: 256Mi
        - name: control-plane-kong-tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: control-plane-kong-token
          projected:
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - name: control-plane-kong-bash-wait-for-postgres
          configMap:
            name: control-plane-kong-bash-wait-for-postgres
            defaultMode: 0755
        - name: kong-cluster-cert
          secret:
            secretName: kong-cluster-cert
---
# Source: kong/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: control-plane-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: control-plane
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: control-plane-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: control-plane
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: control-plane-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: control-plane
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: control-plane
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:13.11.0-debian-11-r20
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "kong"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: control-plane-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: control-plane-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "kong"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "kong" -d "dbname=kong" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "kong" -d "dbname=kong" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kong/templates/migrations.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: control-plane-kong-init-migrations
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
    app.kubernetes.io/component: init-migrations
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 
  template:
    metadata:
      name: kong-init-migrations
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.42.0
        app.kubernetes.io/instance: "control-plane"
        app.kubernetes.io/managed-by: "Helm"
        
        app.kubernetes.io/version: "3.8"
        app.kubernetes.io/component: init-migrations
      annotations:
        sidecar.istio.io/inject: "false"
        kuma.io/service-account-token-volume: control-plane-kong-token
    spec:
      serviceAccountName: control-plane-kong
      automountServiceAccountToken: false
      
      initContainers:
      - name: wait-for-postgres 
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        command: [ "bash", "/wait_postgres/wait.sh" ]
        volumeMounts:
        - name: control-plane-kong-bash-wait-for-postgres
          mountPath: /wait_postgres
        resources:
          {}
      containers:
      - name: kong-migrations
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault 
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        args: [ "kong", "migrations", "bootstrap" ]
        volumeMounts:
        - name: control-plane-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: control-plane-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
        
        resources:
          {}
      securityContext:
        {}
      restartPolicy: OnFailure
      volumes:
      - name: control-plane-kong-prefix-dir
        emptyDir:
          sizeLimit: 256Mi
      - name: control-plane-kong-tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: control-plane-kong-token
        projected:
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
      - name: control-plane-kong-bash-wait-for-postgres
        configMap:
          name: control-plane-kong-bash-wait-for-postgres
          defaultMode: 0755
      - name: kong-cluster-cert
        secret:
          secretName: kong-cluster-cert
---
# Source: kong/templates/migrations-post-upgrade.yaml
# Why is this Job duplicated and not using only helm hooks?
# See: https://github.com/helm/charts/pull/7362
apiVersion: batch/v1
kind: Job
metadata:
  name: control-plane-kong-post-upgrade-migrations
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
    app.kubernetes.io/component: post-upgrade-migrations
  annotations:
    helm.sh/hook: "post-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  backoffLimit: 
  template:
    metadata:
      name: kong-post-upgrade-migrations
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.42.0
        app.kubernetes.io/instance: "control-plane"
        app.kubernetes.io/managed-by: "Helm"
        
        app.kubernetes.io/version: "3.8"
        app.kubernetes.io/component: post-upgrade-migrations
      annotations:
        sidecar.istio.io/inject: "false"
        kuma.io/service-account-token-volume: control-plane-kong-token
    spec:
      serviceAccountName: control-plane-kong
      automountServiceAccountToken: false
      
      initContainers:
      - name: wait-for-postgres 
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        command: [ "bash", "/wait_postgres/wait.sh" ]
        volumeMounts:
        - name: control-plane-kong-bash-wait-for-postgres
          mountPath: /wait_postgres
        resources:
          {}
      containers:
      - name: kong-post-upgrade-migrations
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault 
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        args: [ "kong", "migrations", "finish" ]
        volumeMounts:
        - name: control-plane-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: control-plane-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
        
        resources:
          {}
      securityContext:
        {}
      restartPolicy: OnFailure
      volumes:
      - name: control-plane-kong-prefix-dir
        emptyDir:
          sizeLimit: 256Mi
      - name: control-plane-kong-tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: control-plane-kong-token
        projected:
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
      - name: control-plane-kong-bash-wait-for-postgres
        configMap:
          name: control-plane-kong-bash-wait-for-postgres
          defaultMode: 0755
      - name: kong-cluster-cert
        secret:
          secretName: kong-cluster-cert
---
# Source: kong/templates/migrations-pre-upgrade.yaml
# Why is this Job duplicated and not using only helm hooks?
# See: https://github.com/helm/charts/pull/7362
apiVersion: batch/v1
kind: Job
metadata:
  name: control-plane-kong-pre-upgrade-migrations
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.42.0
    app.kubernetes.io/instance: "control-plane"
    app.kubernetes.io/managed-by: "Helm"
    
    app.kubernetes.io/version: "3.8"
    app.kubernetes.io/component: pre-upgrade-migrations
  annotations:
    helm.sh/hook: "pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation"
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 
  template:
    metadata:
      name: kong-pre-upgrade-migrations
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.42.0
        app.kubernetes.io/instance: "control-plane"
        app.kubernetes.io/managed-by: "Helm"
        
        app.kubernetes.io/version: "3.8"
        app.kubernetes.io/component: pre-upgrade-migrations
      annotations:
        sidecar.istio.io/inject: "false"
        kuma.io/service-account-token-volume: control-plane-kong-token
    spec:
      serviceAccountName: control-plane-kong
      automountServiceAccountToken: false
      
      initContainers:
      - name: wait-for-postgres 
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        command: [ "bash", "/wait_postgres/wait.sh" ]
        volumeMounts:
        - name: control-plane-kong-bash-wait-for-postgres
          mountPath: /wait_postgres
        resources:
          {}
      containers:
      - name: kong-upgrade-migrations
        image: kong/kong-gateway:3.8.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl, [::]:8005 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          value: "kong_admin_password"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql.kong.svc.cluster.local"
        - name: KONG_PG_PASSWORD
          value: "demo123"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_SSL
          value: "on"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        args: [ "kong", "migrations", "up" ]
        volumeMounts:
        - name: control-plane-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: control-plane-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
        
        resources:
          {}
      securityContext:
        {}
      restartPolicy: OnFailure
      volumes:
      - name: control-plane-kong-prefix-dir
        emptyDir:
          sizeLimit: 256Mi
      - name: control-plane-kong-tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: control-plane-kong-token
        projected:
          sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
      - name: control-plane-kong-bash-wait-for-postgres
        configMap:
          name: control-plane-kong-bash-wait-for-postgres
          defaultMode: 0755
      - name: kong-cluster-cert
        secret:
          secretName: kong-cluster-cert
